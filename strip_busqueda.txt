var original_oef = original_oef || window.oef;
var original_redraw = original_redraw || window.redraw;

var canvasRatio= {
    x: window.mc.width / window.ww,
    y: window.mc.height / window.hh
}
function mapToMouse(point) {
    var mouseX = (point.x - window.snake.xx) * window.gsc;
    var mouseY = (point.y - window.snake.yy) * window.gsc;
    return {
        x: mouseX,
        y: mouseY
    };
}
function mouseToScreen(point) {
    var screenX = point.x + (window.ww / 2);
    var screenY = point.y + (window.hh / 2);
    return {
        x: screenX,
        y: screenY
    };
}
function screenToCanvas(point) {
    var canvasX = window.csc *
        (point.x * canvasRatio.x) - parseInt(window.mc.style.left);
    var canvasY = window.csc *
        (point.y * canvasRatio.y) - parseInt(window.mc.style.top);
    return {
        x: canvasX,
        y: canvasY
    };
}
function mapToCanvas(point) {
    var c = mapToMouse(point);
    c = mouseToScreen(c);
    c = screenToCanvas(c);
    return c;
}
function buildCircle(x, y, r) {
    var c = {
        x: Math.round(x),
        y: Math.round(y),
        radius: Math.round(r)
    };
    return c;
}
function circleMapToCanvas(circle) {
    var newCircle = mapToCanvas(circle);
    return buildCircle(
        newCircle.x,
        newCircle.y,
        // Radius also needs to scale by .gsc
        circle.radius * window.gsc
    );
}
function drawCircle(circle, color, fill, alpha) {
    if (alpha === undefined) alpha = 1;
    if (circle.radius === undefined) circle.radius = 5;

    var context = window.mc.getContext('2d');
    var drawCircle = circleMapToCanvas(circle);

    context.save();
    context.globalAlpha = alpha;
    context.beginPath();
    context.strokeStyle = color;
    context.arc(drawCircle.x, drawCircle.y, drawCircle.radius, 0, Math.PI * 2);
    context.stroke();
    if (fill) {
        context.fillStyle = color;
        context.fill();
    }
    context.restore();
}
function drawLine(p1, p2, color, width) {
    if (width === undefined) width = 5;

    var context = window.mc.getContext('2d');
    var dp1 = mapToCanvas(p1);
    var dp2 = mapToCanvas(p2);

    context.save();
    context.beginPath();
    context.lineWidth = width * window.gsc;
    context.strokeStyle = color;
    context.moveTo(dp1.x, dp1.y);
    context.lineTo(dp2.x, dp2.y);
    context.stroke();
    context.restore();
}
var foodTarget=-1;
function drawDebug(){
	if (!window.playing) return;
	if(foodTarget>=0){
		drawCircle(
			{x: window.foods[foodTarget].xx,y: window.foods[foodTarget].yy, radius:20}
			,'#99ffcc','#99ffcc');
		drawLine(
			{x:snake.xx,y:snake.yy},
			{x: window.foods[foodTarget].xx,y: window.foods[foodTarget].yy}
			,'#ff0000');
	}
}
var isBotEnabled=true;
function getDist2(a, b){
	return	Math.pow(a.xx - b.xx, 2) +
			Math.pow(a.yy - b.yy, 2);
}
function bot() {
	if(!isBotEnabled||!window.playing) return;
	var dist=1e20;
	foodTarget=-1;
	for (var i = 0; i < window.foods.length && window.foods[i] !== null; i++) {
		var f=window.foods[i];
		var dx=f.xx-snake.xx;
		var dy=f.yy-snake.yy;
		var tmp=Math.sqrt(dx*dx+dy*dy);
		if(tmp>100){
			if(dist>tmp){
				dist=tmp;
				foodTarget=i;
			}
		}
	}
	var ang_bot=Math.atan2(window.foods[foodTarget].xx-snake.xx,window.foods[foodTarget].yy-snake.yy);
	var nearest=undefined;
	var bestdist=1e20;
	for (var i = 0; i < window.snakes.length; i++) {
		if (window.snakes[i].id === window.snake.id||
			window.snakes[i].alive_amt !== 1) continue;
		var scPoint = {
			xx: window.snakes[i].xx,
			yy: window.snakes[i].yy,
			snake: i,
			radius: window.snakes[i].sc*29.0 / 2
		};
		drawCircle(
			{x: scPoint.xx,y: scPoint.yy, radius:scPoint.radius}
			,'#99ffcc','#99ffcc');
		for (var pts = 0, lp = window.snakes[i].pts.length; pts < lp; pts++) {
			if (window.snakes[i].pts[pts].dying) continue;
			var collisionPoint = {
				xx: window.snakes[i].pts[pts].xx,
				yy: window.snakes[i].pts[pts].yy,
				snake: i,
				radius: window.snakes[i].sc*29.0 / 2
			};
			var curdist=getDist2(collisionPoint,snake);
			if(curdist<100*100) continue;
			if(bestdist>curdist){
				bestdist=curdist;
				nearest=collisionPoint;
			}
		}
	}
	if(bestdist<1e19){
		if(bestdist<250*250){
			ang_bot=Math.atan2(nearest.xx-snake.xx,nearest.yy-snake.yy)+3.14159;
			drawCircle(buildCircle(
				nearest.xx,
				nearest.yy,
				nearest.radius),
				'#00FF00', false);
		}
	}
	window.xm=100.0*Math.sin(ang_bot);
	window.ym=100.0*Math.cos(ang_bot);
}
var userInterface = window.userInterface = (function() {
    window.oef = function() {};
    window.redraw = function() {};
    return {
        oefTimer: function() {
            var start = Date.now();
            original_oef();
            original_redraw();
			bot();
			drawDebug();
            setTimeout(userInterface.oefTimer, (1000 / 30) - (Date.now() - start));
        }
    };
})();

(function() {
    window.social.remove();
    userInterface.oefTimer();
})();